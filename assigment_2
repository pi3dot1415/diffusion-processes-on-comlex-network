class Graph():

    def __init__(self) -> object:
        """
        Function creates a new, empty undirected graph.
        
        Arguments:
            None
        Return:
            graph (Graph): Empty graph object
        """
        
        #Creating variables which defining graph
        self.allEdges=[]
        self.allVertices=[]

    def addVertex(self, vert):
        """
        Add single node to the graph.
        
        Arguments:
            vert (any): name of vertex
        Return:
            None
        """
        
        #Adding new vertex
        
        #Checking if vertex is already in the graph
        if vert not in self.allVertices:
            self.allVertices.append(vert) #if not, adding to the graph

    def addVerticesFromList(self, vertList):
        """
        Add multiple vertices to the graph.
        
        Arguments:
            vertList (list): list of names of vertices
        Return:
            None
        """

        #Adding new vertices
        
        #Checking if vertices are in the the graph
        for verts in vertList:
            if verts not in self.allVertices:
                self.allVertices.append(verts) #if not, adding to the graph

    def edgesChecker(self, fromVert, toVert) -> bool:
        """
        Checking if particular vertices have edge between them.

        Arguments:
            fromVert (any): first vertex
            toVert (any): second vertex
        Return:
            bl (bool): True if there is connection and false otherwise
        """

        #Creating variable to store edges data wihout weights
        tempVar=[]
        for edges in self.allEdges: tempVar+=[edges[:2]]
        
        #Checking if particural edge exist (2 cases because undirected graph)
        if (fromVert, toVert) in tempVar or (toVert, fromVert) in tempVar:
            return(True) #if edge already was in graph returns True
        else:
            return(False) #returns False otherwise
    
    def addEdge(self, fromVert, toVert, weight=None):
        """
        Adding one edge between 2 nodes (which don't have to already exist).
        If connection between those nodes exist then command is ignored.
        the order of fromVert and toVert doesn't matter.

        Arguments:
            fromVert (any): name of first vert 
            toVert (any): name of second vert
            weight (any [optional]): adds weight to 
        Return:
            None
        """

        #Checking if any of vertices missing in the graph, if so, adding them 
        if fromVert not in self.allVertices:
            self.allVertices.append(fromVert)
        if toVert not in self.allVertices:
            self.allVertices.append(toVert)

        #Checking if edge already exist
        bl = self.edgesChecker(fromVert, toVert)
        
        #If not, adding it to the graph
        if weight and not bl: #In case when weight is given
            self.allEdges.append((fromVert, toVert, weight))
        elif not bl: #Otherwise
            self.allEdges.append((fromVert, toVert))

    def addEdgesFromList(self, edgeList):
        """
        Adding multiple edges between 2 nodes each (which don't have to already exist).
        If connection between some of these nodes exist then connection is not added for them.
        the order of nodes in tuple or order of tuples doesn't matter.
        
        Arguments:
            edgeList (list of tuples): list of tuples with edges
        Return:
            None
        """

        #Checking all of edges separetly
        for edges in edgeList:
            #Checking if any of vertices exist, and if not, adding them
            if edges[0] not in self.allVertices:
                self.allVertices.append(edges[0])
            if edges[1] not in self.allVertices:
                self.allVertices.append(edges[1])
            #Checking if edge exist
            bl = self.edgesChecker(edges[0], edges[1])
            if not bl: #If not, adding it
                self.allEdges.append(edges)

    def getVertices(self) -> list:
        """
        Function returns list of all vertices in graph.
        
        Arguments:
            None
        Return:
            (list): list of all vertices
        """

        #Returns list of all vertices in the graph
        return(self.allVertices)

    def getEdges(self) -> list:
        """
        Function returns list of all edges in graph. 
        
        Arguments:
            None
        Return:
            (list of tuples): list of all edges 
        """

        #Returns list of all edges in the graph
        return(self.allEdges)

    def getNeighbours(self, vertKey) -> list:
        """
        Returns list of vertices which are neighbours of particular node (vertKey).
        
        Arguments:
            vertKey (any): name of node
        Return:
            neighbours (list): list of neighbours
        """
        
        #Creating variable to store list of neighbours
        neighbour_list = []

        #Checking all of edges, if they contain vertKey
        for edges in self.allEdges:
            #Because it can be on any position checking both cases
            if vertKey == edges[0]:
                neighbour_list.append(edges[1]) #Adding its pair to list
            elif vertKey == edges[1]:
                neighbour_list.append(edges[0])
        
        #Returns finished list of neighbours
        return (neighbour_list)

    def __contains__ (graph, vertKey) -> bool:
        """
        Function return information if vertice is in the graph
        
        Arguments:
            vertKey (any): checked node name
            graph (Graph)): checked graph 
        Return:
            bl (bool): information if node is in graph 
        """
        
        #Returns information if particular node is in particular graph
        return(vertKey in graph.allVertices) 

    def saveGraph(self, graph):
        """
        Save graph in text file using dot representation.
        
        Arguments:
            graph
        Return:
            
        """
        #how to do this?
        pass

    def checkPath(self, vertex):
        """
        Function check with which new vertices exist edge to particular node.

        Arguments:
            vertex (any): started node
        Return:
            None
        """

        for vert in self.getNeighbours(vertex):
            if vert not in self.connectedList:
                self.shortestPaths[vert]= self.shortestPaths[vertex]+[vert]
                self.connectedList.append(vert)

    def getShortestPaths(self, fromVert) -> dict:
        """
        Finding shortest path from particular node to nodes which are connected with it.
        
        Arguments:
            fromVert (any): vertex for which we checking paths
        Return:
            shortest_paths (dict): shortest paths for nodes which are connected to fromVert
        """

        self.connectedList=[fromVert]
        self.shortestPaths={fromVert: [fromVert]}
        
        for vertex in self.connectedList:
            self.checkPath(vertex)

        return (self.shortestPaths)
