import networkx as nx

class Graph():

    def __init__(self):
        """
        Function creates a new, empty undirected graph.
        
        Arguments:
            None
        Return:
            Empty graph object [class]
        """
        self.allEdges=[]
        self.allVertices=[]


    def addVertex(self, vert):
        """
        Add single node to the graph.
        
        Arguments:
            vert - name of vertex [int, float or string]
        Return:
            None
        """
        try:
            self.allVertices.append(vert)
        except:
            print("Incorrect value")

    def addVerticesFromList(self, vertList):
        """
        Add multiple vertices to the graph.
        
        Arguments:
            vertList - list of names of vertices [list]
        Return:
            None
        """
        try:
            self.graph.allVertices+=vertList
        except:
            print("Incorrect value")

    def addEdge(self, fromVert, toVert):
        """
        Adding edge between 2 nodes (which don't have to already exist).
        If edge connection between those nodes exist then command is ignored.
        the order of fromVert and toVert doesn't matter.

        Arguments:
            fromVert - name of first vert [int, float or string]
            toVert - name of second vert [int, float or string]
        Return:
            None
        """
        try:
            self.allEdges.append((fromVert, toVert))
        except:
            print("Incorrect values")

    def addEdgesFromList(self, edgeList):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass

    def getVertices(self):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass

    def getEdges(self):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass

    def getNeighbours(self, vertKey):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass

    def saveGraph(self, graph):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass

    def getShortestPaths(self, fromVert):
        """
        
        
        Arguments:
            
        Return:
            
        """
        pass
