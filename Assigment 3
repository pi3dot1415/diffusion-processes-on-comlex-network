from xml.dom.minicompat import NodeList
import networkx as nx
import random
import numpy as np

class GraphGenerator ():

    def __init__(self, directed:bool=False) -> None:
        """
        """
        self.directed = directed
        if directed:
            self.graph = nx.DiGraph()
        else:
            self.graph = nx.Graph()

    def random_Graph (self, N:int, edges:int=-1) -> None:
        """
        Function generate random graph by information about number of nodes 
        and edges (optional). There is possibility to generate either directed 
        or undirected graph but they cannot be connected with themselves.
        
        Arguments:
            N (int) - Number of nodes which will be added to the graph
            edges (int) - Deafult -1. Number of edges. If value exceeds possible number of nodes function generates fully-connected graph.
                        If number is negative function generate random number of connections.
            directed (bool) - Deafult "False", allows user to create directed graph.
        
        Returns:
            None
        """
        if edges<0 & self.directed:
            edges=random.randint(0, N*(N-1))
        elif edges<0:
            edges=random.randint(0, (N-1)*N/2)
        elif edges>N*(N-1) & self.directed:
            edges = N*(N-1)
        elif edges>N*(N-1)/2 & (not self.directed):
            edges = N*(N-1)/2
        self.graph.add_nodes_from(np.arange(N))

        self.allEdges = []
        for i in range(N):
            for j in range(N):
                if i>=j & (not self.directed):
                    self.allEdges.append([i,j])
                elif i!=j:
                    self.allEdges.append([i,j])
        
        random.shuffle(self.allEdges)
        self.graph.add_edges_from(self.allEdges[:edges])

    def wattStrogatzGraph (self, N:int) -> None:
        """
        Function creates Watt-Strogatz graph.

        Arguments:

        Return:
            None
        """
        pass

    def barabasiAlbertGraph (self, N:int, M:list) -> None:
        """
        Function creates Barabasi-Albert graph.

        Arguments:

        Return:
            None
        """
        node_weight = []
        self.graph.add_edges_from(M)
        for verts in self.graph.nodes:
            for ns in nx.neighbors(self.graph, verts):
                node_weight.append(verts)
        
        m=len(self.graph.nodes)
        t=np.arrange(N+m)
        
        for vertices in self.graph.nodes:
            t.remove(vertices)

        t=t[:N]
        
        for i in range(N):
            self.graph.add_edge((random.choice(node_weight), t[i]))


        


G=GraphGenerator(directed=True)

G.random_Graph(N=2, edges=15)
