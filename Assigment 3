from xml.dom.minicompat import NodeList
import networkx as nx
import random
import numpy as np

class GraphGenerator ():

    def __init__(self) -> None:
        self.graph=nx.Graph()

    def random_Graph (self, N:int, edges:int=-1, directed:bool=False):
        if edges<0 & directed:
            edges=random.randint(0, N*(N-1))
        elif edges<0:
            edges=random.randint(0, (N-1)*N/2)
        elif edges>N*(N-1) & directed:
            edges = N*(N-1)
        elif edges>N*(N-1)/2 & (not directed):
            edges = N*(N-1)/2
        nodeList=np.arange(N)
        edgesList=[]

        for i in range(edges):
            for j in range(edges):
                if i!=j:
                    edgesList.append([i,j])
        
        random.shuffle(edgesList)
        edgesList=edgesList[:edges]

        print(edgesList)

    def wattStrogatzGraph (self, N:int):
        pass

    def BarabasiAlbertGraph (self,N:int):
        pass

G=GraphGenerator()

G.random_Graph(N=2, edges=15, directed=True)
