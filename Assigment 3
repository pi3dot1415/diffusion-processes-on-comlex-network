#link to github: https://github.com/pi3dot1415/diffusion-processes-on-comlex-network

import networkx as nx
import random
import numpy as np
import matplotlib.pyplot as plt
import powerlaw

class GraphGenerator ():

    def __init__(self) -> None:
        """
        Class generated graph from one of 3 types:
          - random graph (Erdos-Renyi)
          - Watt-Strogatz graph
          - Barabasi-Albert graph 
        """
        pass

    def random_Graph (self, N:int, e:int=-1) -> nx.Graph:
        """
        Function generate random graph by information about number of nodes 
        and edges (optional). There is possibility to generate either directed 
        or undirected graph but they cannot be connected with themselves.

        WARNING: function overwrite previously created graphs
        
        Arguments:
            N (int): Number of nodes which will be added to the graph
            e (int): Deafult -1. Number of edges. If value exceeds possible number of nodes function generates fully-connected graph.
                        If number is negative function generate random number of connections.
        
        Returns:
            self.graph (nx.Graph): generated graph
        """

        #Creating an empty graph 
        self.graph = nx.Graph()

        #Checking if user set number of new edges to randomor if number is greater than possible number of edges.
        if e<0:
            e=random.randint(0, (N-1)*N/2)
        elif (e>N*(N-1)/2):
            e = N*(N-1)/2
        
        #Adding nodes to graph
        self.graph.add_nodes_from(np.arange(N))

        #Creating list with all possible edges
        self.allEdges = []
        for i in range(N):
            for j in range(N):
                if i!=j:
                    self.allEdges.append([i,j])
        
        #Shuffling list of possible edges because they should be randomly chosen
        random.shuffle(self.allEdges)
        
        #Adding to graph first e edges from list
        self.graph.add_edges_from(self.allEdges[:e])

        return self.graph

    def wattStrogatzGraph (self, N:int, K:int, beta:float) -> nx.Graph:
        """
        Function creates Watt-Strogatz graph.

        WARNING: function overwrite previously created graphs 

        Arguments:
            N (int): Desired number of nodes.
            K (int): Has to be even number, and from interval [ln(N), N].
            beta (float): Has to be from interval [0,1]

        Return:
            self.graph (nx.Graph): created graph
        """
        
        #Creating empty graph
        self.graph = nx.Graph()
        
        #Implementing Watt-Srogatz algorithm 

        #Creating edges in graph for all i and j from (0, N-1) which satisfying initial conditions
        for i in range(N):
            for j in range(N):
                tempVar = abs(i-j)%(N-1-K/2)
                if (tempVar>0) & (tempVar*2 <= K):
                    self.graph.add_edge(i, j)

        #Replacing randomly part of edges with new ones
        for edges in self.graph.edges:
            i=np.min(edges)
            j=np.max(edges)
            if (j>i) & (j <= i+K/2):
                #With probability beta
                if np.random.random()<beta:
                    #Making list of all potential new neighbours
                    potential_k = list(np.arange(N))
                    for neigh in self.graph.neighbors(i): #Removing all neighbours of i
                        potential_k.remove(neigh) 
                    potential_k.remove(i) #Removing i to avoid self-loops
                    #Removing edge between i and j
                    self.graph.remove_edge(i,j)
                    #Replace it with connection between i and randomly choosen one
                    self.graph.add_edge(i, np.random.choice(potential_k))   
        
        return self.graph

    def barabasiAlbertGraph (self, N:int, M:list) -> nx.Graph:
        """
        Function creates Barabasi-Albert graph (new nodes are connected with "old" ones which has choosen proportionally to number of their neighbours).
        
        WARNING: function overwrite previously created graphs

        Arguments:
            N (int): Desired number of nodes.
            M (list): Not empty list of edges from which graph will grow.

        Return:
            self.graph (nx.Graph): created graph
        """
        
        #Creating an empty graph
        self.graph = nx.Graph()

        #Adding given edges to the graph.
        self.graph.add_edges_from(M)
        #Creating list of names of future nodes (it has to be longer than N, because some names can be already used)
        t=list(np.arange(N))
        
        #Redefining N as needed number of nodes
        N=N-len(self.graph.nodes)
        
        #Removing names which were used in the graph
        for vertices in self.graph.nodes:
            t.remove(vertices)

        #Taking needed number of names
        t=t[:N]

        #copyying list of nodes to not looping for changing object
        tempVar=list(self.graph.nodes())+[]
        
        #Adding edges to graph (every new node is connected with randomly chosen 
        #(with probability proportional to number of neighbors) node from list M)
        for i in range(N):
            for nds in tempVar:
                if np.random.random()<self.graph.degree(nds)/len(self.graph.edges):
                    self.graph.add_edge(nds, t[i])
        return self.graph

def print_stats (Graph:nx.Graph|nx.DiGraph, name:str) -> list:
    """
    Function to print graph statistics, moreover return list of degrees to generate plots

    Arguments:
        Graph (nx.Graph|nx.DiGraph): graph object
        name (str): name of graph (only to distinguish when printing)
    """
    
    #Creating list to store degrees
    degrees=[]
    for deg in Graph.degree():
        degrees.append(deg[1])

    #Print needed statistics
    print(f"Graph {name}: \n   nodes: {len(Graph.nodes)}, \n   edges:{len(Graph.edges)},")
    print(f"   average degree: {np.mean(degrees)}, \n   degree variance: {np.var(degrees)}")

    return degrees

#Creating graph object
G=GraphGenerator()

#Few examples of random graph
rr = G.random_Graph(N=20, e=30)

R1 = G.random_Graph(N=2000, e=2500)
R2 = G.random_Graph(N=2000, e=4100)
R3 = G.random_Graph(N=2000, e=-1)

RR1 = print_stats(R1, "random_1")
RR2 = print_stats(R2, "random_2")
RR3 = print_stats(R3, "random_3")

#Examples of Watt-Strogatz graph
ww=G.wattStrogatzGraph(N=20, K=3, beta=0.5)

W1 = G.wattStrogatzGraph(N=2000, K=10, beta=0.4)
W2 = G.wattStrogatzGraph(N=2000, K=10, beta=0.75)
W3 = G.wattStrogatzGraph(N=2000, K=26, beta=0.4)

WW1 = print_stats(W1, "watt_1")
WW2 = print_stats(W2, "watt_2")
WW3 = print_stats(W3, "watt_3")

#Cgreating lists to show usage of Barabasi-Albert graph
M1=[]
M2=[]
M3=[]
for i in range (1600):
    X=np.random.randint(0,1600,20)
    for j in range (len(X)):
        if (i!=j) & (j<12):
            M1.append((i,j))
        elif i!=j:
            M2.append((i,j))

for i in range(10):
    for j in range(10):
        if i>j:
            p1=np.random.random()
            if p1<0.15:
                M3.append((i,j))

#Barabasi-Albert examples

bb = G.barabasiAlbertGraph(N
                           =20, M=M3)
B1 = G.barabasiAlbertGraph(N=2000, M=M1)
B2 = G.barabasiAlbertGraph(N=2000, M=M1)
B3 = G.barabasiAlbertGraph(N=2000, M=M2)

BB1 = print_stats(B1, "barabasi_1")
BB2 = print_stats(B2, "barabasi_2")
BB3 = print_stats(B3, "barabasi_3")

plt.subplot(1,3,1)
nx.draw(rr)
plt.draw()
plt.title("Random")
plt.subplot(1,3,2)
nx.draw(ww)
plt.draw()
plt.title("Watt")
plt.subplot(1,3,3)
nx.draw(bb)
plt.draw()
plt.title("Barabassi")
plt.show()

plt.subplot(3,3,1)
plt.hist(RR1, bins=30, density=True)
plt.title("Random 1")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,2)
plt.hist(RR2, bins=30, density=True)
plt.title("Random 2")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,3)
plt.hist(RR3, bins=30, density=True)
plt.title("Random 3")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,4)
plt.hist(WW1, bins=30, density=True)
plt.title("Watt 1")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,5)
plt.hist(WW2, bins=30, density=True)
plt.title("Watt 2")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,6)
plt.hist(WW3, bins=30, density=True)
plt.title("Watt 3")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,7)
plt.hist(BB1, bins=30, density=True)
plt.title("Barabasi 1")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,8)
plt.hist(BB2, bins=30, density=True)
plt.title("Barabasi 2")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.subplot(3,3,9)
plt.hist(BB3, bins=30, density=True)
plt.title("Barabasi 3")
plt.xlabel("degree")
plt.ylabel("probebility")
plt.show()
