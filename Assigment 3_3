#Part 2 - generating statistics

#importing libraries
import csv
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

#set topic from previously prepared
topic = "ChatGPT_100"
#create empty directed graph
G = nx.DiGraph()

#open file to read data
with open(f'data_file_topic_{topic}.csv', 'r') as myfile:
    csvreader = csv.reader(myfile)
    #going trough every row
    for row in csvreader:
        #checking it's a post (so it don't is a reply to anything)
        if row[0]=="0":
            #if it post taking info of author and put them as nodes
            G.add_node(row[1])
        else:
            #if it comment/reply take info about author of this reply and of one for which it response and make edge between them
            #Unless author response to him/herself
            if row[1]==row[2]:
                continue
            G.add_edge(row[1], row[2])

#close file
myfile.close()

#printing number of nodes and edges
print(f"nodes: {len(G.nodes)}, edges: {len(G.edges)}")

#set maximmum number of neighbors to-1
maxi=-1
#and celebrities list to empty
celebrities = []
#set degrees and n_friends as empty list
degrees =[]
n_friends=[]

#iterating for every node (to determine which are celebrities and if it friend paradox in network)
for nds in G.nodes:
    #some temporary variables
    neighs = 0
    f_neighs=0
    itr=0
    #checking frinds paradox
    for  verts in nx.neighbors(G, nds):
        neighs+=1
        for vrts in nx.neighbors(G, verts):
            f_neighs+=1
        itr+=1 
    if itr>0:
        n_friends.append(neighs>f_neighs/itr)
    #searching celebrity(/ies)
    if G.degree[nds]>maxi:
        maxi=G.degree[nds]
        celebrities=[nds]
    elif G.degree[nds]==maxi:
        celebrities.append(nds)
    
    degrees.append(G.degree[nds])

#printing model statistics
print(f"number of users which have more connections than users connected with them in average: {sum(n_friends)}")
print(f"connection of one celebrity: {maxi} \n  list of celebrities: {celebrities}")
bc=nx.betweenness_centrality(G)
maxi=-1
max_nds=None
for nds in G.nodes:
    if bc[nds]>maxi:
        maxi = bc[nds]
        max_nds=nds
print(f"Comunication bottleness: {max_nds} (with coefficient: {maxi})")
#ploting degree distribution
plt.hist(degrees, bins=list(np.arange(0.5, np.max(degrees)+1.5, 1)), edgecolor='black', density=True)
plt.xlabel("degree")
plt.ylabel("probability")
plt.title("density of graph degree")
plt.xticks(list(np.arange(0, np.max(degrees)+1, 10)))
plt.grid(True)
plt.show()

#nx.draw_circular(G, node_size=2)

nx.write_gml(G, f"graph{topic}.gml")
